name: deploy newly built image

on: [push]
env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: django_app
  ECS_CLUSTER: django-app
  ECS_SERVICE: django_app

jobs:
 build-and-push-for-ecr:

   runs-on: ubuntu-latest
   timeout-minutes: 300

   steps:
   # Initial setup
   - name: checkout
     uses: actions/checkout@v2

   - name: configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
       aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ env.AWS_REGION }}
       role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

   - name: Create env file
     run: |
       echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
       echo "DATABASE_URL=${{ secrets.RDS_URL }}" >> .env
       echo "SQLITE_URL=sqlite:///db.sqlite3" >> .env
       echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_KEY_ID }}" >> .env
       echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
       echo "S3_STATIC_BUCKET=${{ secrets.S3_STATIC_BUCKET }}" >> .env

   - name: Set IMAGE_TAG to GITHUB_ENV
     run: |
       echo "IMAGE_TAG=master" >> $GITHUB_ENV
       # echo "IMAGE_TAG=$(echo ${{ github.ref }} | sed -e 's#refs/tags/##g')" >> $GITHUB_ENV
       # echo "IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s#refs/heads/##g")" >> $GITHUB_ENV

     # build and push this image
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1

   - name: Build, tag, and push image to Amazon ECR
     env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
     run: |
       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
